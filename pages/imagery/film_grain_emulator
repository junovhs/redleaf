<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>Advanced Film Grain Effect</title>
<style>
  body {
    font-family: Arial, sans-serif;
    background: #2c2c2c;
    color: #ffffff;
    margin: 0;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  #controls {
    display: flex;
    flex-wrap: wrap;
    background: #3a3a3a;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    max-width: 800px;
    width: 100%;
  }

  .control-group {
    flex: 1 1 200px;
    margin: 10px;
  }

  .control-group label {
    display: block;
    margin-bottom: 5px;
    font-size: 14px;
  }

  .control-row {
    display: flex;
    align-items: center;
  }

  .control-row input[type=number] {
    width: 60px;
    margin-left: 10px;
    background: #444;
    border: 1px solid #666;
    color: #fff;
    border-radius: 3px;
    padding: 2px;
  }

  #preview-container {
    position: relative;
    border: 2px solid #555;
    border-radius: 10px;
    overflow: hidden;
  }

  #mainCanvas, #beforeCanvas {
    max-width: 100%;
    border-radius: 10px;
  }

  #beforeCanvas {
    position: absolute;
    top: 0;
    left: 0;
    opacity: 0;
    transition: opacity 0.3s;
  }

  #toggleLabel {
    display: flex;
    align-items: center;
    margin-top: 10px;
  }

  #toggleLabel input {
    margin-right: 10px;
  }

  button {
    margin: 5px;
    padding: 10px;
    background: #555;
    border: none;
    border-radius: 5px;
    color: #fff;
    cursor: pointer;
  }

  button:hover {
    background: #777;
  }

  #loadImageInput {
    margin-top: 10px;
    width: 100%;
  }

  #settingsJSON {
    width: 100%;
    height: 100px;
    background: #222;
    color: #fff;
    font-family: monospace;
    padding: 10px;
    margin-bottom: 20px;
    border: 1px solid #444;
    border-radius: 5px;
  }

</style>
</head>
<body>

<h1>Advanced Film Grain Effect</h1>

<div id="controls">
  <div class="control-group">
    <label>Grain Intensity: <span id="intensityValue">0.5</span></label>
    <div class="control-row">
      <input type="range" id="intensitySlider" min="0" max="1" step="0.01" value="0.5">
      <input type="number" id="intensityInput" step="0.01" min="0" max="1" value="0.5">
    </div>
  </div>

  <div class="control-group">
    <label>Grain Size: <span id="grainSizeValue">2.0</span></label>
    <div class="control-row">
      <input type="range" id="grainSizeSlider" min="1" max="10" step="0.1" value="2.0">
      <input type="number" id="grainSizeInput" step="0.1" min="1" max="10" value="2.0">
    </div>
  </div>

  <div class="control-group">
    <label>Grain Distribution:</label>
    <select id="distributionMode">
      <option value="uniform">Uniform</option>
      <option value="dynamic">Dynamic</option>
    </select>
  </div>

  <div class="control-group">
    <label>Blending Mode:</label>
    <select id="blendMode">
      <option value="overlay">Overlay</option>
      <option value="softlight">Soft Light</option>
      <option value="screen">Screen</option>
      <option value="multiply">Multiply</option>
    </select>
  </div>

  <div class="control-group">
    <label>Blending Opacity: <span id="opacityValue">0.5</span></label>
    <div class="control-row">
      <input type="range" id="opacitySlider" min="0" max="1" step="0.01" value="0.5">
      <input type="number" id="opacityInput" step="0.01" min="0" max="1" value="0.5">
    </div>
  </div>

  <div class="control-group">
    <label>Grain Shape:</label>
    <select id="grainShape">
      <option value="circle">Circular</option>
      <option value="square">Square</option>
      <option value="irregular">Irregular</option>
    </select>
  </div>

  <div class="control-group">
    <label>Grain Scaling:</label>
    <select id="grainScaleMode">
      <option value="uniform">Uniform</option>
      <option value="variable">Variable</option>
    </select>
  </div>

  <div class="control-group">
    <label>Noise Periodicity:</label>
    <select id="noisePeriodicity">
      <option value="random">Random</option>
      <option value="regular">Regular</option>
    </select>
  </div>

  <div class="control-group">
    <label>Edge Softening:</label>
    <div class="control-row">
      <input type="range" id="edgeSoftening" min="0" max="10" step="0.1" value="2.0">
      <input type="number" id="edgeSofteningInput" step="0.1" min="0" max="10" value="2.0">
    </div>
  </div>

  <div class="control-group">
    <label>Color Variation:</label>
    <select id="colorVariation">
      <option value="none">None</option>
      <option value="hue">Hue Jitter</option>
      <option value="chromatic">Chromatic Aberration</option>
    </select>
  </div>

  <div class="control-group">
    <label>Distribution Pattern:</label>
    <select id="distributionPattern">
      <option value="random">Random</option>
      <option value="gaussian">Gaussian</option>
      <option value="poisson">Poisson</option>
    </select>
  </div>

  <div class="control-group">
    <label>Luminance Bias:</label>
    <div class="control-row">
      <input type="range" id="luminanceBias" min="0" max="1" step="0.01" value="0.5">
      <input type="number" id="luminanceBiasInput" step="0.01" min="0" max="1" value="0.5">
    </div>
  </div>

  <div class="control-group">
    <label>Sharpness Preservation:</label>
    <div class="control-row">
      <input type="range" id="sharpnessPreservation" min="0" max="1" step="0.01" value="0.7">
      <input type="number" id="sharpnessPreservationInput" step="0.01" min="0" max="1" value="0.7">
    </div>
  </div>

  <div class="control-group">
    <label>Grain Contrast:</label>
    <div class="control-row">
      <input type="range" id="grainContrast" min="0" max="2" step="0.01" value="1.0">
      <input type="number" id="grainContrastInput" step="0.01" min="0" max="2" value="1.0">
    </div>
  </div>

  <div class="control-group">
    <label>Grain Opacity Decay:</label>
    <div class="control-row">
      <input type="range" id="grainOpacityDecay" min="0" max="1" step="0.01" value="0.3">
      <input type="number" id="grainOpacityDecayInput" step="0.01" min="0" max="1" value="0.3">
    </div>
  </div>

  <div class="control-group">
    <label>Subpixel Noise Sampling:</label>
    <input type="checkbox" id="grainSubpixel">
  </div>

  <div class="control-group">
    <label>Spatial Coherence:</label>
    <div class="control-row">
      <input type="range" id="grainSpatialCoherence" min="0" max="1" step="0.01" value="0.5">
      <input type="number" id="grainSpatialCoherenceInput" step="0.01" min="0" max="1" value="0.5">
    </div>
  </div>

  <div class="control-group">
    <button id="presetVintage">Preset: Vintage Film</button>
    <button id="presetMinimal">Preset: Minimal Noise</button>
  </div>

  <div class="control-group">
    <label id="toggleLabel"><input type="checkbox" id="beforeAfterToggle"> Show Before/After</label>
  </div>

  <div class="control-group" style="flex: 1 1 100%;">
    <label>Load Image:</label>
    <input type="file" id="loadImageInput" accept="image/*">
  </div>

  <div class="control-group" style="flex: 1 1 100%;">
    <button id="downloadWithGrainBtn">Download Image with Grain</button>
    <button id="downloadGrainOnlyBtn">Download Isolated Grain</button>
  </div>
</div>

<textarea id="settingsJSON" readonly></textarea>

<div id="preview-container">
  <canvas id="mainCanvas"></canvas>
  <canvas id="beforeCanvas"></canvas>
</div>

<script>
/*
  Enhanced Film Grain with Efficiency & Features
  ----------------------------------------------
  Changes from previous:
  - Debounced rendering when sliders are moved for better performance.
  - Numeric input fields linked to sliders for precise control.
  - "Download image with grain" and "Download isolated grain" buttons.
  - A JSON output textarea that displays current settings (parameters).
  
  Note: This code is still CPU-based. For very high resolutions or complex 
  settings, consider using WebGL or Web Workers for further performance gains.
*/

// Global variables
let originalImage = null;
let imageData = null; // Original image data
let processedData = null; // Processed image data
let noiseDataGlobal = null; // Store the noise for separate download

let params = {
  intensity: 0.5,
  grainSize: 2.0,
  distribution: "uniform",
  blendMode: "overlay",
  blendOpacity: 0.5,
  grainShape: "circle",
  grainScaleMode: "uniform",
  noisePeriodicity: "random",
  edgeSoftening: 2.0,
  colorVariation: "none",
  distributionPattern: "random",
  luminanceBias: 0.5,
  sharpnessPreservation: 0.7,
  grainContrast: 1.0,
  grainOpacityDecay: 0.3,
  grainSubpixel: false,
  spatialCoherence: 0.5
};

let showBefore = false;
let applyTimeout = null; // For debouncing updates

const canvas = document.getElementById('mainCanvas');
const ctx = canvas.getContext('2d');
const beforeCanvas = document.getElementById('beforeCanvas');
const beforeCtx = beforeCanvas.getContext('2d');

// UI elements
const controls = {
  intensitySlider: document.getElementById('intensitySlider'),
  intensityInput: document.getElementById('intensityInput'),
  intensityValue: document.getElementById('intensityValue'),

  grainSizeSlider: document.getElementById('grainSizeSlider'),
  grainSizeInput: document.getElementById('grainSizeInput'),
  grainSizeValue: document.getElementById('grainSizeValue'),

  distributionMode: document.getElementById('distributionMode'),
  blendModeSelect: document.getElementById('blendMode'),

  opacitySlider: document.getElementById('opacitySlider'),
  opacityInput: document.getElementById('opacityInput'),
  opacityValue: document.getElementById('opacityValue'),

  grainShape: document.getElementById('grainShape'),
  grainScaleMode: document.getElementById('grainScaleMode'),
  noisePeriodicity: document.getElementById('noisePeriodicity'),

  edgeSoftening: document.getElementById('edgeSoftening'),
  edgeSofteningInput: document.getElementById('edgeSofteningInput'),

  colorVariation: document.getElementById('colorVariation'),
  distributionPattern: document.getElementById('distributionPattern'),

  luminanceBias: document.getElementById('luminanceBias'),
  luminanceBiasInput: document.getElementById('luminanceBiasInput'),

  sharpnessPreservation: document.getElementById('sharpnessPreservation'),
  sharpnessPreservationInput: document.getElementById('sharpnessPreservationInput'),

  grainContrast: document.getElementById('grainContrast'),
  grainContrastInput: document.getElementById('grainContrastInput'),

  grainOpacityDecay: document.getElementById('grainOpacityDecay'),
  grainOpacityDecayInput: document.getElementById('grainOpacityDecayInput'),

  grainSubpixel: document.getElementById('grainSubpixel'),

  grainSpatialCoherence: document.getElementById('grainSpatialCoherence'),
  grainSpatialCoherenceInput: document.getElementById('grainSpatialCoherenceInput'),

  beforeAfterToggle: document.getElementById('beforeAfterToggle'),
  presetVintageBtn: document.getElementById('presetVintage'),
  presetMinimalBtn: document.getElementById('presetMinimal'),
  loadImageInput: document.getElementById('loadImageInput'),

  downloadWithGrainBtn: document.getElementById('downloadWithGrainBtn'),
  downloadGrainOnlyBtn: document.getElementById('downloadGrainOnlyBtn'),

  settingsJSON: document.getElementById('settingsJSON')
};

// Debounce function
function debounceApplyFilmGrain() {
  if (applyTimeout) clearTimeout(applyTimeout);
  applyTimeout = setTimeout(applyFilmGrain, 100);
}

// Utility to link a slider and number input
function linkSliderAndInput(slider, input, paramName, valueFormatter = v => parseFloat(v)) {
  slider.addEventListener('input', () => {
    let val = valueFormatter(slider.value);
    input.value = val;
    params[paramName] = val;
    updateParamDisplay(paramName, val);
    debounceApplyFilmGrain();
  });
  input.addEventListener('change', () => {
    let val = valueFormatter(input.value);
    slider.value = val;
    params[paramName] = val;
    updateParamDisplay(paramName, val);
    debounceApplyFilmGrain();
  });
}

// Update displayed value labels
function updateParamDisplay(paramName, val) {
  switch(paramName) {
    case 'intensity':
      controls.intensityValue.textContent = val.toFixed(2);
      break;
    case 'grainSize':
      controls.grainSizeValue.textContent = val.toFixed(1);
      break;
    case 'blendOpacity':
      controls.opacityValue.textContent = val.toFixed(2);
      break;
  }
  updateJSONOutput();
}

// Setup event listeners for sliders and inputs
linkSliderAndInput(controls.intensitySlider, controls.intensityInput, 'intensity');
linkSliderAndInput(controls.grainSizeSlider, controls.grainSizeInput, 'grainSize');
linkSliderAndInput(controls.opacitySlider, controls.opacityInput, 'blendOpacity');
linkSliderAndInput(controls.edgeSoftening, controls.edgeSofteningInput, 'edgeSoftening');
linkSliderAndInput(controls.luminanceBias, controls.luminanceBiasInput, 'luminanceBias');
linkSliderAndInput(controls.sharpnessPreservation, controls.sharpnessPreservationInput, 'sharpnessPreservation');
linkSliderAndInput(controls.grainContrast, controls.grainContrastInput, 'grainContrast');
linkSliderAndInput(controls.grainOpacityDecay, controls.grainOpacityDecayInput, 'grainOpacityDecay');
linkSliderAndInput(controls.grainSpatialCoherence, controls.grainSpatialCoherenceInput, 'spatialCoherence');

controls.distributionMode.addEventListener('change', () => {
  params.distribution = controls.distributionMode.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.blendModeSelect.addEventListener('change', () => {
  params.blendMode = controls.blendModeSelect.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.grainShape.addEventListener('change', () => {
  params.grainShape = controls.grainShape.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.grainScaleMode.addEventListener('change', () => {
  params.grainScaleMode = controls.grainScaleMode.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.noisePeriodicity.addEventListener('change', () => {
  params.noisePeriodicity = controls.noisePeriodicity.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.colorVariation.addEventListener('change', () => {
  params.colorVariation = controls.colorVariation.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.distributionPattern.addEventListener('change', () => {
  params.distributionPattern = controls.distributionPattern.value;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.grainSubpixel.addEventListener('change', () => {
  params.grainSubpixel = controls.grainSubpixel.checked;
  updateJSONOutput();
  debounceApplyFilmGrain();
});

controls.beforeAfterToggle.addEventListener('change', () => {
  showBefore = controls.beforeAfterToggle.checked;
  beforeCanvas.style.opacity = showBefore ? '1' : '0';
});

controls.presetVintageBtn.addEventListener('click', () => {
  // Vintage Film Preset
  let preset = {
    intensity: 0.8,
    grainSize: 4.0,
    distribution: "dynamic",
    blendMode: "softlight",
    blendOpacity: 0.6,
    grainShape: "irregular",
    grainScaleMode: "uniform",
    noisePeriodicity: "random",
    edgeSoftening: 3.0,
    colorVariation: "chromatic",
    distributionPattern: "gaussian",
    luminanceBias: 0.7,
    sharpnessPreservation: 0.6,
    grainContrast: 1.2,
    grainOpacityDecay: 0.4,
    grainSubpixel: true,
    spatialCoherence: 0.6
  };
  loadParams(preset);
});

controls.presetMinimalBtn.addEventListener('click', () => {
  // Minimal Noise Preset
  let preset = {
    intensity: 0.3,
    grainSize: 1.5,
    distribution: "uniform",
    blendMode: "overlay",
    blendOpacity: 0.3,
    grainShape: "circle",
    grainScaleMode: "uniform",
    noisePeriodicity: "random",
    edgeSoftening: 1.0,
    colorVariation: "none",
    distributionPattern: "random",
    luminanceBias: 0.5,
    sharpnessPreservation: 0.8,
    grainContrast: 1.0,
    grainOpacityDecay: 0.2,
    grainSubpixel: false,
    spatialCoherence: 0.4
  };
  loadParams(preset);
});

function loadParams(p) {
  params = {...params, ...p};
  // Update UI from params
  controls.intensitySlider.value = params.intensity; controls.intensityInput.value = params.intensity;
  controls.intensityValue.textContent = params.intensity.toFixed(2);

  controls.grainSizeSlider.value = params.grainSize; controls.grainSizeInput.value = params.grainSize;
  controls.grainSizeValue.textContent = params.grainSize.toFixed(1);

  controls.distributionMode.value = params.distribution;
  controls.blendModeSelect.value = params.blendMode;

  controls.opacitySlider.value = params.blendOpacity; controls.opacityInput.value = params.blendOpacity;
  controls.opacityValue.textContent = params.blendOpacity.toFixed(2);

  controls.grainShape.value = params.grainShape;
  controls.grainScaleMode.value = params.grainScaleMode;
  controls.noisePeriodicity.value = params.noisePeriodicity;

  controls.edgeSoftening.value = params.edgeSoftening; controls.edgeSofteningInput.value = params.edgeSoftening;
  
  controls.colorVariation.value = params.colorVariation;
  controls.distributionPattern.value = params.distributionPattern;

  controls.luminanceBias.value = params.luminanceBias; controls.luminanceBiasInput.value = params.luminanceBias;
  controls.sharpnessPreservation.value = params.sharpnessPreservation; controls.sharpnessPreservationInput.value = params.sharpnessPreservation;
  controls.grainContrast.value = params.grainContrast; controls.grainContrastInput.value = params.grainContrast;
  controls.grainOpacityDecay.value = params.grainOpacityDecay; controls.grainOpacityDecayInput.value = params.grainOpacityDecay;
  controls.grainSubpixel.checked = params.grainSubpixel;
  controls.grainSpatialCoherence.value = params.spatialCoherence; controls.grainSpatialCoherenceInput.value = params.spatialCoherence;

  updateJSONOutput();
  debounceApplyFilmGrain();
}

controls.loadImageInput.addEventListener('change', (e) => {
  const file = e.target.files[0];
  if(!file) return;
  const reader = new FileReader();
  reader.onload = function(evt) {
    const img = new Image();
    img.onload = function() {
      canvas.width = img.width;
      canvas.height = img.height;
      beforeCanvas.width = img.width;
      beforeCanvas.height = img.height;
      ctx.drawImage(img, 0, 0);
      beforeCtx.drawImage(img, 0, 0);
      originalImage = img;
      imageData = ctx.getImageData(0,0,canvas.width,canvas.height);
      applyFilmGrain();
    };
    img.src = evt.target.result;
  };
  reader.readAsDataURL(file);
});

// Download buttons
controls.downloadWithGrainBtn.addEventListener('click', () => {
  downloadCanvas(canvas, "image_with_grain.png");
});

controls.downloadGrainOnlyBtn.addEventListener('click', () => {
  if(!noiseDataGlobal) return;
  const width = imageData.width;
  const height = imageData.height;
  const noiseCanvas = document.createElement('canvas');
  noiseCanvas.width = width;
  noiseCanvas.height = height;
  const nctx = noiseCanvas.getContext('2d');
  const noiseImgData = nctx.createImageData(width, height);
  for(let i=0; i<width*height*4; i++) {
    noiseImgData.data[i] = Math.min(255, Math.max(0, noiseDataGlobal[i]*255));
  }
  nctx.putImageData(noiseImgData, 0,0);
  downloadCanvas(noiseCanvas, "noise_only.png");
});

function downloadCanvas(cvs, filename) {
  const link = document.createElement('a');
  link.download = filename;
  link.href = cvs.toDataURL();
  link.click();
}

// Initialize with a placeholder
window.onload = function() {
  canvas.width = 600;
  canvas.height = 400;
  beforeCanvas.width = 600;
  beforeCanvas.height = 400;
  ctx.fillStyle = "#888";
  ctx.fillRect(0,0,canvas.width,canvas.height);
  beforeCtx.fillStyle = "#888";
  beforeCtx.fillRect(0,0,canvas.width,canvas.height);
  let imgData = ctx.getImageData(0,0,canvas.width,canvas.height);
  imageData = imgData;
  updateJSONOutput();
  applyFilmGrain();
};

// Update the JSON output
function updateJSONOutput() {
  controls.settingsJSON.value = JSON.stringify(params, null, 2);
}

// Core Functions
function applyFilmGrain() {
  if(!imageData) return;
  processedData = new ImageData(new Uint8ClampedArray(imageData.data), imageData.width, imageData.height);

  const width = imageData.width;
  const height = imageData.height;

  let noiseData = new Float32Array(width * height * 4); 

  // Generate noise
  for (let y=0; y<height; y++) {
    for (let x=0; x<width; x++) {
      let idx = (y * width + x) * 4;

      let grainX = params.grainScaleMode === "uniform" ? Math.floor(x / params.grainSize) : x / params.grainSize;
      let grainY = params.grainScaleMode === "uniform" ? Math.floor(y / params.grainSize) : y / params.grainSize;

      if(params.grainSubpixel) {
        grainX += Math.random();
        grainY += Math.random();
      }

      let noise = generateNoise(grainX, grainY);

      let R = imageData.data[idx] / 255;
      let G = imageData.data[idx+1] / 255;
      let B = imageData.data[idx+2] / 255;
      let L = 0.2126 * R + 0.7152 * G + 0.0722 * B;

      let distributionFactor = params.distribution === "uniform" ? 1.0 : Math.pow((1.0 - L), params.luminanceBias);

      noise *= distributionFactor;
      noise = (noise - 0.5) * params.grainContrast + 0.5;
      noise = noise * (1 - params.grainOpacityDecay) + params.grainOpacityDecay * 0.5;

      noiseData[idx] = noise;
      noiseData[idx+1] = noise;
      noiseData[idx+2] = noise;
      noiseData[idx+3] = 1.0;
    }
  }

  if(params.edgeSoftening > 0) {
    noiseData = gaussianBlur(noiseData, width, height, params.edgeSoftening);
  }

  if(params.colorVariation !== "none") {
    noiseData = applyColorVariation(noiseData, width, height);
  }

  if(params.spatialCoherence > 0) {
    noiseData = applySpatialCoherence(noiseData, width, height, params.spatialCoherence);
  }

  noiseDataGlobal = noiseData; // store globally for download

  // Blend noiseData
  for (let y=0; y<height; y++) {
    for (let x=0; x<width; x++) {
      let idx = (y * width + x) * 4;

      let I_r = processedData.data[idx] / 255;
      let I_g = processedData.data[idx+1] / 255;
      let I_b = processedData.data[idx+2] / 255;

      let N_r = noiseData[idx];
      let N_g = noiseData[idx+1];
      let N_b = noiseData[idx+2];

      let B_r = blendModes(I_r, N_r, params.blendMode);
      let B_g = blendModes(I_g, N_g, params.blendMode);
      let B_b = blendModes(I_b, N_b, params.blendMode);

      let out_r = (1 - params.blendOpacity) * I_r + params.blendOpacity * B_r;
      let out_g = (1 - params.blendOpacity) * I_g + params.blendOpacity * B_g;
      let out_b = (1 - params.blendOpacity) * I_b + params.blendOpacity * B_b;

      out_r = preserveContrast(I_r, out_r, params.sharpnessPreservation);
      out_g = preserveContrast(I_g, out_g, params.sharpnessPreservation);
      out_b = preserveContrast(I_b, out_b, params.sharpnessPreservation);

      processedData.data[idx] = clamp(out_r * 255);
      processedData.data[idx+1] = clamp(out_g * 255);
      processedData.data[idx+2] = clamp(out_b * 255);
      processedData.data[idx+3] = 255;
    }
  }

  renderCanvas();
}

function renderCanvas() {
  if (!imageData) return;
  ctx.putImageData(processedData, 0, 0);
}

// Blend modes
function blendModes(I, N, mode) {
  switch(mode) {
    case 'overlay':
      return (I < 0.5) ? (2 * I * N) : (1 - 2 * (1 - I) * (1 - N));
    case 'softlight':
      return (1 - 2 * N) * I * I + 2 * N * I;
    case 'screen':
      return 1 - (1 - I)*(1 - N);
    case 'multiply':
      return I*N;
    default:
      return (I < 0.5) ? (2*I*N) : (1 - 2*(1 - I)*(1 - N));
  }
}

function generateNoise(x, y) {
  let normalizedX = x % 1;
  let normalizedY = y % 1;
  let noise = 0;

  if(params.noisePeriodicity === "regular") {
    noise = Math.sin(x * Math.PI) * Math.cos(y * Math.PI);
    noise = (noise + 1)/2;
  } else {
    let u1 = pseudoRandom2D(x, y);
    let u2 = pseudoRandom2D(x + 1, y + 1);
    noise = gaussianFromUniform(u1, u2);
    noise = (noise + 1)/2;
  }

  // Grain shape
  switch(params.grainShape) {
    case 'circle':
      noise *= circularMask(normalizedX, normalizedY);
      break;
    case 'irregular':
      noise *= irregularMask(normalizedX, normalizedY);
      break;
    case 'square':
      // no mask needed
      break;
  }

  return noise * params.intensity;
}

function pseudoRandom2D(x, y) {
  let seed = (x * 374761393 + y * 668265263) ^ 0x5bf03635;
  seed = (seed ^ (seed >> 13)) * 1274126177;
  seed = seed ^ (seed >> 16);
  return (seed >>> 0) / 4294967295;
}

function gaussianFromUniform(u1, u2) {
  if(u1 < 1e-15) u1 = 1e-15;
  let r = Math.sqrt(-2.0 * Math.log(u1));
  let theta = 2.0 * Math.PI * u2;
  return r * Math.cos(theta);
}

function circularMask(x, y) {
  let dx = x - 0.5;
  let dy = y - 0.5;
  return (dx*dx + dy*dy) <= 0.25 ? 1 : 0;
}

function irregularMask(x, y) {
  let angle = Math.atan2(y - 0.5, x - 0.5);
  let radius = Math.sqrt((x - 0.5)*(x - 0.5) + (y - 0.5)*(y - 0.5));
  let irregular = (Math.sin(angle*5 + radius*10)*0.5 + 0.5);
  return irregular * (1 - Math.abs(radius - 0.5));
}

function gaussianBlur(noiseData, width, height, radius) {
  let kernelSize = Math.ceil(radius * 3)*2+1;
  let kernel = [];
  let sigma = radius;
  let sum = 0;
  for(let i=0;i<kernelSize;i++){
    let x = i - Math.floor(kernelSize/2);
    let val = Math.exp(-(x*x)/(2*sigma*sigma));
    kernel.push(val);
    sum+=val;
  }
  kernel = kernel.map(v=>v/sum);

  let tempData = new Float32Array(width * height * 4);
  // horizontal blur
  for(let y=0; y<height; y++){
    for(let x=0; x<width; x++){
      let idx = (y * width + x)*4;
      let accum = [0,0,0,0];
      for(let k=0;k<kernelSize;k++){
        let sx = x + k - Math.floor(kernelSize/2);
        sx = Math.max(0, Math.min(width-1, sx));
        let sidx = (y*width+sx)*4;
        for(let c=0;c<4;c++){
          accum[c]+= noiseData[sidx+c]*kernel[k];
        }
      }
      for(let c=0;c<4;c++){
        tempData[idx+c] = accum[c];
      }
    }
  }

  let blurredData = new Float32Array(width * height *4);
  // vertical blur
  for(let y=0;y<height;y++){
    for(let x=0;x<width;x++){
      let idx=(y*width+x)*4;
      let accum=[0,0,0,0];
      for(let k=0;k<kernelSize;k++){
        let sy=y+k-Math.floor(kernelSize/2);
        sy=Math.max(0,Math.min(height-1,sy));
        let sidx=(sy*width+x)*4;
        for(let c=0;c<4;c++){
          accum[c]+=tempData[sidx+c]*kernel[k];
        }
      }
      for(let c=0;c<4;c++){
        blurredData[idx+c]=accum[c];
      }
    }
  }
  return blurredData;
}

function applyColorVariation(noiseData, width, height) {
  for(let i=0; i<width*height*4; i+=4) {
    if(params.colorVariation === "hue") {
      let hueShift = (Math.random()-0.5)*0.1;
      let color = hslToRgb((Math.random()+hueShift)%1,0.5,0.5);
      noiseData[i]=color.r;
      noiseData[i+1]=color.g;
      noiseData[i+2]=color.b;
    } else if(params.colorVariation==="chromatic") {
      noiseData[i] = noiseData[i]*1.0;
      noiseData[i+1] = noiseData[i+1]*0.95;
      noiseData[i+2] = noiseData[i+2]*1.05;
    }
  }
  return noiseData;
}

function hslToRgb(h,s,l){
  h=h%1;let r,g,b;
  if(s===0){r=g=b=l;}
  else{
    const hue2rgb=(p,q,t)=>{
      if(t<0)t+=1;if(t>1)t-=1;
      if(t<1/6)return p+(q-p)*6*t;
      if(t<1/2)return q;
      if(t<2/3)return p+(q-p)*(2/3 - t)*6;
      return p;
    }
    let q=l<0.5?l*(1+s):l+s-l*s;
    let p=2*l-q;
    r=hue2rgb(p,q,h+1/3);
    g=hue2rgb(p,q,h);
    b=hue2rgb(p,q,h-1/3);
  }
  return {r:r,g:g,b:b};
}

function applySpatialCoherence(noiseData, width, height, coherence) {
  let tempData=new Float32Array(noiseData.length);
  for(let y=1;y<height-1;y++){
    for(let x=1;x<width-1;x++){
      let idx=(y*width+x)*4;
      for(let c=0;c<3;c++){
        let sum=noiseData[idx+c];
        sum+=noiseData[idx+c-4];
        sum+=noiseData[idx+c+4];
        sum+=noiseData[idx+c-(width*4)];
        sum+=noiseData[idx+c+(width*4)];
        tempData[idx+c]=(sum/5)*coherence+noiseData[idx+c]*(1-coherence);
      }
      tempData[idx+3]=noiseData[idx+3];
    }
  }
  // edges
  for(let x=0;x<width;x++){
    let idxTop=(0*width+x)*4;
    let idxBottom=((height-1)*width+x)*4;
    for(let c=0;c<4;c++){
      tempData[idxTop+c]=noiseData[idxTop+c];
      tempData[idxBottom+c]=noiseData[idxBottom+c];
    }
  }
  for(let y=0;y<height;y++){
    let idxLeft=(y*width)*4;
    let idxRight=(y*width+(width-1))*4;
    for(let c=0;c<4;c++){
      tempData[idxLeft+c]=noiseData[idxLeft+c];
      tempData[idxRight+c]=noiseData[idxRight+c];
    }
  }
  return tempData;
}

function preserveContrast(I,O,ratio) {
  return ratio*O+(1-ratio)*I;
}

function clamp(value) {
  return Math.max(0,Math.min(255,value));
}

</script>
</body>
</html>
